---
export interface Props {
	src: string;
}
const { src } = Astro.props;
---

<meta name="vtbot-swap-sound" content={src} />
<script>
	import { TRANSITION_BEFORE_PREPARATION, TRANSITION_BEFORE_SWAP } from 'astro:transitions/client';

	const meta: HTMLMetaElement | null = document.head.querySelector("meta[name='vtbot-swap-sound']");

	const context = new AudioContext();
	const gainNode = context.createGain();

	if (!meta) {
		// console.error('[vtbot] SwapSound must be inserted into the <head> of your document');
	} else {
		const audio = document.createElement('audio');
		audio.id = 'vtbot-swap-sound';
		audio.src = meta.content;
		audio.preload = 'auto';
		audio.dataset.astroTransitionPersist = 'vtbot-swap-sound';
		document.body.appendChild(audio);
		audio.load();

		const source = context.createMediaElementSource(audio);

		source.connect(gainNode);
		gainNode.connect(context.destination);
	}

	document.addEventListener(TRANSITION_BEFORE_PREPARATION, () => {
		const audio = document.querySelector<HTMLAudioElement>('#vtbot-swap-sound');
		gainNode.gain.setValueAtTime(0.6, context.currentTime);
		audio?.play().catch(() => {
			// interrupted, ignore
		});
	});
	document.addEventListener(TRANSITION_BEFORE_SWAP, (e) => {
		e.viewTransition.ready
			.then(() => gainNode.gain.setValueAtTime(1, context.currentTime))
			.catch(() => {});
		e.viewTransition.finished
			.then(() => {
				const audio = document.querySelector('#vtbot-swap-sound') as HTMLAudioElement;
				if (!audio) return;
				gainNode.gain.setValueAtTime(1, context.currentTime);
				gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + 0.5);
				setTimeout(() => {
					audio.pause();
					audio.load();
				}, 500);
			})
			.catch(() => {});
	});
</script>
