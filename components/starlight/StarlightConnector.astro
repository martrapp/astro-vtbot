---

---

<script>
	import { openCategory, updateCurrentPageMarker } from './utils';
	import * as STARLIGHT from './utils';
	import { updateMultiSidebar } from './starlight-multi-sidebar';

	export const REPLACE_SIDEBAR_CONTENT = 'vtbot-starlight-replace-sidebar-content';
	export const RETAIN_CURRENT_PAGE_MARKER = 'vtbot-starlight-retain-current-page-marker';

	const queryMarkers = () => ({
		replaceSidebarContent: document.querySelector(`head meta[name="${REPLACE_SIDEBAR_CONTENT}"]`),
		retainCurrentPageMarker: document.querySelector(
			`head meta[name="${RETAIN_CURRENT_PAGE_MARKER}"]`
		),

		mainTransitionScope: document.querySelector<HTMLMetaElement>(
			'head meta[name="vtbot-main-transition-scope"]'
		)?.content,
	});
	let { replaceSidebarContent, retainCurrentPageMarker, mainTransitionScope } = queryMarkers();

	openCategory();
	updateLanguageSelector(window.document);

	function afterLoader(e: TransitionBeforePreparationEvent) {
		markMainFrameForReplacementSwap(document);
		markMainFrameForReplacementSwap(e.newDocument);
		closeMobileMenu();
		updateLanguageSelector(e.newDocument);
		setMainTransitionScope(e);
		!replaceSidebarContent && !retainCurrentPageMarker && updateCurrentPageMarker(e.to);
	}

	function beforeSwap(e: TransitionBeforeSwapEvent) {
		updateSidebar(e.newDocument);
	}
	function afterSwap(e: TransitionBeforeSwapEvent) {
		!retainCurrentPageMarker && openCategory();
	}

	/* ---------------- */

	function closeMobileMenu() {
		if (document.body.hasAttribute(STARLIGHT.MOBILE_MENU_EXPANDED)) {
			document.body
				.querySelector(STARLIGHT.MENU_BUTTON)
				?.closest('nav')
				?.dispatchEvent(
					new KeyboardEvent('keyup', {
						key: 'Escape',
						code: 'Escape',
						charCode: 27,
						keyCode: 27,
						shiftKey: false,
						ctrlKey: false,
						altKey: false,
						metaKey: false,
					})
				);
		}
	}

	function markMainFrameForReplacementSwap(doc: Document) {
		doc.body.querySelector(STARLIGHT.MAIN_FRAME)?.setAttribute('data-vtbot-replace', 'main');
	}

	function setMainTransitionScope(e: TransitionBeforePreparationEvent) {
		if (!mainTransitionScope) return;
		setMainTransitionScope(document, mainTransitionScope);
		setMainTransitionScope(e.newDocument, mainTransitionScope);

		function setMainTransitionScope(doc: Document, value: string) {
			const main = doc.querySelector<HTMLElement>(STARLIGHT.MAIN_SECTION);
			main && (main.dataset.astroTransitionScope = value);
		}
	}

	function updateSidebar(newDoc: Document) {
		const newSidebar = newDoc.querySelector(STARLIGHT.SIDEBAR);
		/* Exit */
		if (!newSidebar) {
			document.querySelector(STARLIGHT.SIDEBAR)?.remove();
		} else {
			const sidebar = document.querySelector(STARLIGHT.SIDEBAR);
			if (!sidebar) {
				/* Entry */
				document
					.querySelector(STARLIGHT.MAIN_FRAME)
					?.insertAdjacentElement('beforebegin', newSidebar);
			} else {
				/* Update */
				const oldContent = sidebar.querySelector(STARLIGHT.SIDEBAR_CONTENT);
				const newContent = newSidebar.querySelector(STARLIGHT.SIDEBAR_CONTENT);
				const differs =
					[...(oldContent?.querySelectorAll('a') ?? [])].map((a) => a.href).join(' ') !==
					[...(newContent?.querySelectorAll('a') ?? [])].map((a) => a.href).join(' ');

				if (replaceSidebarContent || differs) {
					if (oldContent && newContent) {
						/* only content if possible to keep scroll state */
						oldContent.setAttribute('data-vtbot-replace', 'vtbot-sidebar-content');
						newContent.setAttribute('data-vtbot-replace', 'vtbot-sidebar-content');
						sidebar.removeAttribute('data-vtbot-replace');
						newSidebar.removeAttribute('data-vtbot-replace');
					} else {
						/* full sidebar */
						sidebar.setAttribute('data-vtbot-replace', 'vtbot-sidebar-content');
						newSidebar.setAttribute('data-vtbot-replace', 'vtbot-sidebar-content');
						oldContent?.removeAttribute('data-vtbot-replace');
						newContent?.removeAttribute('data-vtbot-replace');
					}
				} else {
					/* check for known extensions */
					updateMultiSidebar(document);
					updateMultiSidebar(newDoc);
				}
			}
		}
	}

	function updateLanguageSelector(doc: Document) {
		doc
			.querySelectorAll(STARLIGHT.LANGUAGE_SELECTOR)
			.forEach((el, idx) =>
				el.setAttribute('data-vtbot-replace', `vtbot-${STARLIGHT.LANGUAGE_SELECTOR}-${idx}`)
			);
	}

	/*--------------------------*/

	import {
		TRANSITION_BEFORE_PREPARATION,
		TRANSITION_BEFORE_SWAP,
		TransitionBeforePreparationEvent,
		TransitionBeforeSwapEvent,
	} from 'astro:transitions/client';

	document.addEventListener(TRANSITION_BEFORE_PREPARATION, (e) => {
		({ replaceSidebarContent, retainCurrentPageMarker, mainTransitionScope } = queryMarkers());

		const originalLoader = e.loader;
		e.loader = async () => {
			await originalLoader();
			afterLoader(e);
		};
	});

	document.addEventListener(TRANSITION_BEFORE_SWAP, (e) => {
		beforeSwap(e);
		const originalSwap = e.swap;
		e.swap = () => {
			originalSwap();
			afterSwap(e);
		};
	});
</script>
