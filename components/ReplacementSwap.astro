---
export interface Props {
	rootAttributesToPreserve?: string;
}
const { rootAttributesToPreserve = '' } = Astro.props;
---

<meta name="vtbot-replace-swap" content={rootAttributesToPreserve} />
<script>
	import { TRANSITION_BEFORE_SWAP } from 'astro:transitions/client';
	import * as swapFunctions from './swap-functions';

	const TAG = 'vtbot-replace-swap';
	const preserve = () =>
		(document.querySelector(`meta[name="${TAG}"]`)?.getAttribute('content') ?? '')
			.split(',')
			.map((s) => s.trim());

	document.addEventListener(TRANSITION_BEFORE_SWAP, (event) => {
		const originalSwap = event.swap;
		event.swap = () => {
			const replacements = (document: Document) => {
				const elements = document.body.querySelectorAll('[data-vtbot-replace]');
				const names = [...elements].map(
					(el) => el instanceof HTMLElement && el.dataset.vtbotReplace
				);
				return { elements: [...elements], names: new Set(names) };
			};
			const { elements: oldEls, names: oldNames } = replacements(document);
			const { elements: newEls, names: newNames } = replacements(event.newDocument);
			const intersection = [...oldNames].filter((name) => newNames.has(name));
			if (intersection.length === 0) {
				originalSwap();
				return;
			}
			const doc = event.newDocument;
			swapFunctions.deselectScripts(doc);
			const preservedAttributes = preserve().map((n) => ({
				key: n,
				val: document.documentElement.getAttribute(n),
			}));
			swapFunctions.swapRootAttributes(doc);
			preservedAttributes.forEach(
				(attr) => attr.val !== null && document.documentElement.setAttribute(attr.key, attr.val)
			);
			swapFunctions.swapHeadElements(doc);
			const restore = swapFunctions.saveFocus();

			intersection.forEach((name) => {
				const oldEl = oldEls.find((el) => (el as HTMLElement).dataset.vtbotReplace === name);
				const newEl = newEls.find((el) => (el as HTMLElement).dataset.vtbotReplace === name);
				if (oldEl && newEl) {
					swapFunctions.swapBodyElement(newEl, oldEl);
				}
			});
			restore();

			[...document.querySelectorAll("[class*='astro-route-announcer']")].forEach((e) => e.remove());
		};
	});
</script>
