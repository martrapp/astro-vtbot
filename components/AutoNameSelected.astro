---
export interface Props {
	selector?: string;
	prefix?: string;
	force?: boolean;
	shuffle?: boolean;
}
const { selector, prefix, force, shuffle } = Astro.props;
const error = '[vtbot] AutoNameSelected:';
if (prefix && prefix.includes(' '))
	throw new Error(`${error} prefix must not contain space characters: '${prefix}'`);

if (selector === '') throw Error(`${error} selector must not be the empty string`);
---

{
	(selector || prefix || force !== undefined || shuffle !== undefined) && (
		<meta
			name="vtbot-auto-name-selected"
			content={
				(prefix ?? 'vtbot-hx') +
				' ' +
				(force ?? '') +
				' ' +
				(shuffle ?? '') +
				' ' +
				(selector ?? '')
			}
		/>
	)
}

<script>
	import { TRANSITION_BEFORE_PREPARATION } from 'astro:transitions/client';

	const markHeadings = (doc: Document) => {
		[...doc.querySelectorAll<HTMLMetaElement>('meta[name="vtbot-auto-name-selected"]')]
			.map((meta) => meta.content ?? '   ')
			.forEach((m) => {
				const [first, second, third, ...rest] = m.split(' ');
				const joined = rest.join(' ');
				const selector = joined || 'h1, h2, h3, h4, h5, h6';
				const prefix = first || '';
				const force = second ? JSON.parse(second) : true;
				const shuffle = third ? JSON.parse(third) : false;
				const all = doc.querySelectorAll(selector);
				const random = shuffle ? randomize(all.length) : [];
				all.forEach((e, idx) => {
					const style = (e as HTMLElement).style;
					if (!style.viewTransitionName || force) {
						const name =
							prefix === ''
								? ''
								: prefix === 'none'
									? 'none'
									: `${prefix}-` + (shuffle ? random[idx] : idx);

						style.viewTransitionName = name;
					}
				});
			});
	};

	function randomize(n: number) {
		const array = Array.from({ length: n }, (_, i) => i);
		for (let i = n - 1; i > 0; --i) {
			let j = Math.floor(Math.random() * (i + 1));
			[array[i], array[j]] = [array[j], array[i]];
		}
		return array;
	}

	document.addEventListener(TRANSITION_BEFORE_PREPARATION, (e) => {
		markHeadings(document);
		const originalLoader = e.loader;
		e.loader = async () => {
			await originalLoader();
			markHeadings(e.newDocument);
		};
	});
</script>
