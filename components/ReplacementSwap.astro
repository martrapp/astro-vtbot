---
export interface Props {
	rootAttributesToPreserve?: string;
}
const { rootAttributesToPreserve = '' } = Astro.props;
---

<meta name="vtbot-replace-swap" content={rootAttributesToPreserve} />
<script>
	import { TRANSITION_BEFORE_SWAP, isTransitionBeforeSwapEvent } from 'astro:transitions/client';
	import { customSwap } from './swap-utils';

	const TAG = 'vtbot-replace-swap';
	const preserve = () =>
		(document.querySelector(`meta[name="${TAG}"]`)?.getAttribute('content') ?? '')
			.split(',')
			.map((s) => s.trim());

	document.addEventListener(TRANSITION_BEFORE_SWAP, (event) => {
		if (isTransitionBeforeSwapEvent(event)) {
			const originalSwap = event.swap;
			event.swap = () => {
				const replacements = (document: Document) => {
					const elements = document.body.querySelectorAll('[data-vtbot-replace]');
					const names = [...elements].map(
						(el) => el instanceof HTMLElement && el.dataset.vtbotReplace
					);
					return { elements: [...elements], names: new Set(names) };
				};
				const { elements: oldEls, names: oldNames } = replacements(document);
				const { elements: newEls, names: newNames } = replacements(event.newDocument);
				const intersection = [...oldNames].filter((name) => newNames.has(name));
				if (intersection.length === 0) {
					originalSwap();
					return;
				}
				customSwap(event.newDocument, preserve(), () => {
					intersection.forEach((name) => {
						const oldEl = oldEls.find((el) => (el as HTMLElement).dataset.vtbotReplace === name);
						const newEl = newEls.find((el) => (el as HTMLElement).dataset.vtbotReplace === name);
						if (oldEl && newEl) {
							astroBodySwap(oldEl, newEl);
						}
					});
					[...document.querySelectorAll("[class*='astro-route-announcer']")].forEach((e) =>
						e.remove()
					);
				});
			};
		}
	});

	function astroBodySwap(oldEl: Element, newEl: Element) {
		const PERSIST_ATTR = 'data-astro-transition-persist';

		const shouldCopyProps = (el: HTMLElement) => {
			const persistProps = el.dataset.astroTransitionPersistProps;
			return persistProps == null || persistProps === 'false';
		};

		oldEl.replaceWith(newEl);

		for (const el of oldEl.querySelectorAll(`[${PERSIST_ATTR}]`)) {
			const id = el.getAttribute(PERSIST_ATTR);
			const newEl = document.querySelector(`[${PERSIST_ATTR}="${id}"]`);
			if (newEl) {
				newEl.replaceWith(el);
				if (el.localName === 'astro-island' && shouldCopyProps(el as HTMLElement)) {
					el.setAttribute('ssr', '');
					el.setAttribute('props', newEl.getAttribute('props')!);
				}
			}
		}
	}
</script>
